// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/rasulov-emirlan/micro-pizzas/backends/users/internal/domain"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddRole mocks base method.
func (m *MockService) AddRole(ctx context.Context, userID domain.ID, role domain.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", ctx, userID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRole indicates an expected call of AddRole.
func (mr *MockServiceMockRecorder) AddRole(ctx, userID, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockService)(nil).AddRole), ctx, userID, role)
}

// Delete mocks base method.
func (m *MockService) Delete(ctx context.Context, userID domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, userID)
}

// Read mocks base method.
func (m *MockService) Read(ctx context.Context, id domain.ID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockServiceMockRecorder) Read(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockService)(nil).Read), ctx, id)
}

// ReadAll mocks base method.
func (m *MockService) ReadAll(ctx context.Context, cfg domain.ReadAllInput) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", ctx, cfg)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockServiceMockRecorder) ReadAll(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockService)(nil).ReadAll), ctx, cfg)
}

// ReadByEmail mocks base method.
func (m *MockService) ReadByEmail(ctx context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByEmail", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByEmail indicates an expected call of ReadByEmail.
func (mr *MockServiceMockRecorder) ReadByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByEmail", reflect.TypeOf((*MockService)(nil).ReadByEmail), ctx, email)
}

// ReadByPhoneNumber mocks base method.
func (m *MockService) ReadByPhoneNumber(ctx context.Context, phoneNumber string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByPhoneNumber", ctx, phoneNumber)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByPhoneNumber indicates an expected call of ReadByPhoneNumber.
func (mr *MockServiceMockRecorder) ReadByPhoneNumber(ctx, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByPhoneNumber", reflect.TypeOf((*MockService)(nil).ReadByPhoneNumber), ctx, phoneNumber)
}

// Refresh mocks base method.
func (m *MockService) Refresh(ctx context.Context, refreshKey string) (domain.SignInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, refreshKey)
	ret0, _ := ret[0].(domain.SignInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockServiceMockRecorder) Refresh(ctx, refreshKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockService)(nil).Refresh), ctx, refreshKey)
}

// RemoveRole mocks base method.
func (m *MockService) RemoveRole(ctx context.Context, userID domain.ID, role domain.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRole", ctx, userID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRole indicates an expected call of RemoveRole.
func (mr *MockServiceMockRecorder) RemoveRole(ctx, userID, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRole", reflect.TypeOf((*MockService)(nil).RemoveRole), ctx, userID, role)
}

// RequestSignIn mocks base method.
func (m *MockService) RequestSignIn(ctx context.Context, inp domain.RequestSignInInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestSignIn", ctx, inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestSignIn indicates an expected call of RequestSignIn.
func (mr *MockServiceMockRecorder) RequestSignIn(ctx, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSignIn", reflect.TypeOf((*MockService)(nil).RequestSignIn), ctx, inp)
}

// RequestSignUp mocks base method.
func (m *MockService) RequestSignUp(arg0 context.Context, arg1 domain.RequestSignUpInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestSignUp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestSignUp indicates an expected call of RequestSignUp.
func (mr *MockServiceMockRecorder) RequestSignUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSignUp", reflect.TypeOf((*MockService)(nil).RequestSignUp), arg0, arg1)
}

// SignIn mocks base method.
func (m *MockService) SignIn(ctx context.Context, inp domain.SignInInput) (domain.SignInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, inp)
	ret0, _ := ret[0].(domain.SignInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockServiceMockRecorder) SignIn(ctx, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockService)(nil).SignIn), ctx, inp)
}

// SignInEmailPassword mocks base method.
func (m *MockService) SignInEmailPassword(ctx context.Context, email, password string) (domain.SignInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInEmailPassword", ctx, email, password)
	ret0, _ := ret[0].(domain.SignInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInEmailPassword indicates an expected call of SignInEmailPassword.
func (mr *MockServiceMockRecorder) SignInEmailPassword(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInEmailPassword", reflect.TypeOf((*MockService)(nil).SignInEmailPassword), ctx, email, password)
}

// SignUp mocks base method.
func (m *MockService) SignUp(arg0 context.Context, arg1 domain.SignUpInput) (domain.SignInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(domain.SignInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockServiceMockRecorder) SignUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockService)(nil).SignUp), arg0, arg1)
}

// Update mocks base method.
func (m *MockService) Update(ctx context.Context, changeset domain.UpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, changeset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(ctx, changeset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, changeset)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddRole mocks base method.
func (m *MockRepository) AddRole(arg0 context.Context, arg1 domain.ID, arg2 domain.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRole indicates an expected call of AddRole.
func (mr *MockRepositoryMockRecorder) AddRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockRepository)(nil).AddRole), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 context.Context, arg1 domain.User) (domain.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(domain.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRepository) Delete(arg0 context.Context, arg1 domain.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), arg0, arg1)
}

// Read mocks base method.
func (m *MockRepository) Read(arg0 context.Context, arg1 domain.ID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRepositoryMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRepository)(nil).Read), arg0, arg1)
}

// ReadAll mocks base method.
func (m *MockRepository) ReadAll(ctx context.Context, cfg domain.ReadAllInput) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", ctx, cfg)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockRepositoryMockRecorder) ReadAll(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockRepository)(nil).ReadAll), ctx, cfg)
}

// ReadByEmail mocks base method.
func (m *MockRepository) ReadByEmail(ctx context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByEmail", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByEmail indicates an expected call of ReadByEmail.
func (mr *MockRepositoryMockRecorder) ReadByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByEmail", reflect.TypeOf((*MockRepository)(nil).ReadByEmail), ctx, email)
}

// ReadByName mocks base method.
func (m *MockRepository) ReadByName(ctx context.Context, fullName string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByName", ctx, fullName)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByName indicates an expected call of ReadByName.
func (mr *MockRepositoryMockRecorder) ReadByName(ctx, fullName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByName", reflect.TypeOf((*MockRepository)(nil).ReadByName), ctx, fullName)
}

// ReadByPhoneNumber mocks base method.
func (m *MockRepository) ReadByPhoneNumber(ctx context.Context, phoneNumber string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByPhoneNumber", ctx, phoneNumber)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByPhoneNumber indicates an expected call of ReadByPhoneNumber.
func (mr *MockRepositoryMockRecorder) ReadByPhoneNumber(ctx, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByPhoneNumber", reflect.TypeOf((*MockRepository)(nil).ReadByPhoneNumber), ctx, phoneNumber)
}

// RemoveRole mocks base method.
func (m *MockRepository) RemoveRole(arg0 context.Context, arg1 domain.ID, arg2 domain.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRole indicates an expected call of RemoveRole.
func (mr *MockRepositoryMockRecorder) RemoveRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRole", reflect.TypeOf((*MockRepository)(nil).RemoveRole), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, changeset domain.UpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, changeset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, changeset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, changeset)
}

// MockSMSsender is a mock of SMSsender interface.
type MockSMSsender struct {
	ctrl     *gomock.Controller
	recorder *MockSMSsenderMockRecorder
}

// MockSMSsenderMockRecorder is the mock recorder for MockSMSsender.
type MockSMSsenderMockRecorder struct {
	mock *MockSMSsender
}

// NewMockSMSsender creates a new mock instance.
func NewMockSMSsender(ctrl *gomock.Controller) *MockSMSsender {
	mock := &MockSMSsender{ctrl: ctrl}
	mock.recorder = &MockSMSsenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMSsender) EXPECT() *MockSMSsenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSMSsender) Send(phoneNumber, title, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", phoneNumber, title, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSMSsenderMockRecorder) Send(phoneNumber, title, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSMSsender)(nil).Send), phoneNumber, title, text)
}

// MockEmailer is a mock of Emailer interface.
type MockEmailer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailerMockRecorder
}

// MockEmailerMockRecorder is the mock recorder for MockEmailer.
type MockEmailerMockRecorder struct {
	mock *MockEmailer
}

// NewMockEmailer creates a new mock instance.
func NewMockEmailer(ctrl *gomock.Controller) *MockEmailer {
	mock := &MockEmailer{ctrl: ctrl}
	mock.recorder = &MockEmailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailer) EXPECT() *MockEmailerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockEmailer) Send(email, title, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", email, title, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEmailerMockRecorder) Send(email, title, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailer)(nil).Send), email, title, text)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCache) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// Store mocks base method.
func (m *MockCache) Store(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockCacheMockRecorder) Store(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCache)(nil).Store), key, value)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(format string, args ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Infof mocks base method.
func (m *MockLogger) Infof(format string, args ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// MockJWTmanager is a mock of JWTmanager interface.
type MockJWTmanager struct {
	ctrl     *gomock.Controller
	recorder *MockJWTmanagerMockRecorder
}

// MockJWTmanagerMockRecorder is the mock recorder for MockJWTmanager.
type MockJWTmanagerMockRecorder struct {
	mock *MockJWTmanager
}

// NewMockJWTmanager creates a new mock instance.
func NewMockJWTmanager(ctrl *gomock.Controller) *MockJWTmanager {
	mock := &MockJWTmanager{ctrl: ctrl}
	mock.recorder = &MockJWTmanagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTmanager) EXPECT() *MockJWTmanagerMockRecorder {
	return m.recorder
}

// DecodeAccess mocks base method.
func (m *MockJWTmanager) DecodeAccess(accessKey string) (domain.AccessClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccess", accessKey)
	ret0, _ := ret[0].(domain.AccessClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccess indicates an expected call of DecodeAccess.
func (mr *MockJWTmanagerMockRecorder) DecodeAccess(accessKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccess", reflect.TypeOf((*MockJWTmanager)(nil).DecodeAccess), accessKey)
}

// DecodeRefresh mocks base method.
func (m *MockJWTmanager) DecodeRefresh(refreshKey string) (domain.RefreshClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRefresh", refreshKey)
	ret0, _ := ret[0].(domain.RefreshClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRefresh indicates an expected call of DecodeRefresh.
func (mr *MockJWTmanagerMockRecorder) DecodeRefresh(refreshKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRefresh", reflect.TypeOf((*MockJWTmanager)(nil).DecodeRefresh), refreshKey)
}

// Generate mocks base method.
func (m *MockJWTmanager) Generate(userID domain.ID, roles []domain.Role) (domain.SignInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", userID, roles)
	ret0, _ := ret[0].(domain.SignInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockJWTmanagerMockRecorder) Generate(userID, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockJWTmanager)(nil).Generate), userID, roles)
}

// SetExp mocks base method.
func (m *MockJWTmanager) SetExp(access, refresh time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExp", access, refresh)
}

// SetExp indicates an expected call of SetExp.
func (mr *MockJWTmanagerMockRecorder) SetExp(access, refresh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExp", reflect.TypeOf((*MockJWTmanager)(nil).SetExp), access, refresh)
}

// SetKey mocks base method.
func (m *MockJWTmanager) SetKey(key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetKey", key)
}

// SetKey indicates an expected call of SetKey.
func (mr *MockJWTmanagerMockRecorder) SetKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKey", reflect.TypeOf((*MockJWTmanager)(nil).SetKey), key)
}
